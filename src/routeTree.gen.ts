/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SettingsRouteImport } from './routes/settings/route'
import { Route as SearchRouteImport } from './routes/search/route'
import { Route as UsernameRouteImport } from './routes/$username/route'
import { Route as IndexImport } from './routes/index'
import { Route as FeedIndexImport } from './routes/feed/index'
import { Route as FeedIdImport } from './routes/feed/$id'

// Create/Update Routes

const SettingsRouteRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const SearchRouteRoute = SearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRoute,
} as any)

const UsernameRouteRoute = UsernameRouteImport.update({
  id: '/$username',
  path: '/$username',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const FeedIndexRoute = FeedIndexImport.update({
  id: '/feed/',
  path: '/feed/',
  getParentRoute: () => rootRoute,
} as any)

const FeedIdRoute = FeedIdImport.update({
  id: '/feed/$id',
  path: '/feed/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/$username': {
      id: '/$username'
      path: '/$username'
      fullPath: '/$username'
      preLoaderRoute: typeof UsernameRouteImport
      parentRoute: typeof rootRoute
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchRouteImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRoute
    }
    '/feed/$id': {
      id: '/feed/$id'
      path: '/feed/$id'
      fullPath: '/feed/$id'
      preLoaderRoute: typeof FeedIdImport
      parentRoute: typeof rootRoute
    }
    '/feed/': {
      id: '/feed/'
      path: '/feed'
      fullPath: '/feed'
      preLoaderRoute: typeof FeedIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$username': typeof UsernameRouteRoute
  '/search': typeof SearchRouteRoute
  '/settings': typeof SettingsRouteRoute
  '/feed/$id': typeof FeedIdRoute
  '/feed': typeof FeedIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$username': typeof UsernameRouteRoute
  '/search': typeof SearchRouteRoute
  '/settings': typeof SettingsRouteRoute
  '/feed/$id': typeof FeedIdRoute
  '/feed': typeof FeedIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/$username': typeof UsernameRouteRoute
  '/search': typeof SearchRouteRoute
  '/settings': typeof SettingsRouteRoute
  '/feed/$id': typeof FeedIdRoute
  '/feed/': typeof FeedIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$username'
    | '/search'
    | '/settings'
    | '/feed/$id'
    | '/feed'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/$username' | '/search' | '/settings' | '/feed/$id' | '/feed'
  id:
    | '__root__'
    | '/'
    | '/$username'
    | '/search'
    | '/settings'
    | '/feed/$id'
    | '/feed/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  UsernameRouteRoute: typeof UsernameRouteRoute
  SearchRouteRoute: typeof SearchRouteRoute
  SettingsRouteRoute: typeof SettingsRouteRoute
  FeedIdRoute: typeof FeedIdRoute
  FeedIndexRoute: typeof FeedIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  UsernameRouteRoute: UsernameRouteRoute,
  SearchRouteRoute: SearchRouteRoute,
  SettingsRouteRoute: SettingsRouteRoute,
  FeedIdRoute: FeedIdRoute,
  FeedIndexRoute: FeedIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$username",
        "/search",
        "/settings",
        "/feed/$id",
        "/feed/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/$username": {
      "filePath": "$username/route.tsx"
    },
    "/search": {
      "filePath": "search/route.tsx"
    },
    "/settings": {
      "filePath": "settings/route.tsx"
    },
    "/feed/$id": {
      "filePath": "feed/$id.tsx"
    },
    "/feed/": {
      "filePath": "feed/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
